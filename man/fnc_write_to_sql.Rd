% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fnc_write_to_sql.R
\name{fnc_write_to_sql}
\alias{fnc_write_to_sql}
\title{Function to write temporary Outputfiles to SQLite-DB}
\usage{
fnc_write_to_sql(dir_tmp, db_name, del_tmp = T)
}
\arguments{
\item{dir_tmp}{path to temporary files}

\item{db_name}{name and file path of the SQL-database}

\item{del_tmp}{optional, shall tmp-files be deleted. Default is T}
}
\value{
writes the output to a database
}
\description{
Parallel writing is not supported for SQLite. To end with a SQLite-DB \code{\link{fnc_write}} and \code{\link{fnc_write_agg}} now create temporary .rds files that this function reads, writes to an SQLite-Database, and then deletes. \cr For every folder in \code{dir_tmp}, one table will be added to the SQL-Database, with tables named after folder names in \code{dir_tmp}. This procedure has been selected due to the default settings of \code{\link{fnc_write_agg}} and \code{\link{fnc_write}}, which create one folder for each aggregation. For example, meta files and soil-dfs can be stored accordingly (see example).
}
\examples{
# set soil-list
ls.soil <- fnc_get_soil(df.ids = test.ids.bds,
                        soil_option = "BZE",
                        PTF_to_use = "WESSOLEK")

# run multiple points
res <- run_multisite_LWFB90(options_b90 = set_optionsLWFB90(),
                            param_b90 = fnc_get_params(df.ids = test.ids.bds,
                                                       tree_species = "spruce"),
                            soil = ls.soil,

                            climate = fnc_get_clim(df.ids = test.ids.bds,
                                                   mindate = as.Date("2002-01-01"),
                                                   maxdate = as.Date("2003-12-31")),


                            all_combinations = F,
                            cores = parallel::detectCores()-1,

                            rtrn_output = F,
                            rtrn_input = F,

                            output_fun = fnc_write_agg,
                            aggr_tp = "vegper",
                            col_select_vp = c("tran", "ptran"),
                            dir_name= "./tmp/")

ls.soil <- bind_rows(ls.soil)

# create dirs
if(!dir.exists("./tmp/soils/")){
  dir.create("./tmp/soils/", recursive = T)
}

saveRDS(ls.soil, file = "./tmp/soils/soils.rds")

# write to db
fnc_write_to_sql(db_name = "./tmp/testdb2.sqlite",
                 dir_tmp = "./tmp/")

# check how the result looks:
con <- dbConnect(drv = RSQLite::SQLite(), dbname =  "./tmp/testdb.sqlite")
dbListTables(conn = con)
dbGetQuery(con, "SELECT * FROM soils WHERE ID_custom = 'A'")
dbGetQuery(con, "SELECT * FROM vegper WHERE ID_custom = 'A'")
dbGetQuery(con, "SELECT * FROM vegper")
dbDisconnect(con)

# # delete example tmp file
# unlink("./tmp/", recursive = T)
}
